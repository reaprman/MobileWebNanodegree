{"version":3,"sources":["dbhelper.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","DBHelper","this","value","callback","id","fetchURL","DATABASE_URL","console","log","concat","fetch","method","then","response","json","data","err","error","fetchRestaurants","restaurants","restaurant","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","marker","L","latlng","lat","lng","title","name","alt","url","urlForRestaurant","addTo","newMap","get","port"],"mappings":"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","file":"dbhelper.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337 // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback, id) {\r\n    /* let xhr = new XMLHttpRequest();\r\n    xhr.open('GET', DBHelper.DATABASE_URL);\r\n    xhr.onload = () => {\r\n      if (xhr.status === 200) { // Got a success response from server!\r\n        const json = JSON.parse(xhr.responseText);\r\n        const restaurants = json.restaurants;\r\n        callback(null, restaurants);\r\n      } else { // Oops!. Got an error from server.\r\n        const error = (`Request failed. Returned status of ${xhr.status}`);\r\n        callback(error, null);\r\n      }\r\n    };\r\n    xhr.send(); \r\n    */\r\n    let fetchURL = DBHelper.DATABASE_URL;\r\n\r\n    if (!id) {\r\n      fetchURL = DBHelper.DATABASE_URL;\r\n    } else {\r\n      fetchURL = DBHelper.DATABASE_URL + '/' + id;\r\n    } \r\n    console.log(`FetchURL is: ${fetchURL}`);\r\n    \r\n    fetch(fetchURL, { method: 'GET' }).then(response => {response.json()\r\n    .then(data => {\r\n      console.log(\"restaurants JSON: \", data); // added from Project supplied webinar to troubleshoot 10th image not displaying\r\n      callback(null, data);\r\n      });\r\n    })\r\n    .catch(err => {const error = (`Request failed. Returned ${err}`);\r\n    callback(error, null);\r\n  })\r\n}\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(callback, id) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        console.log(`callback type: ${typeof callback}`);\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(callback, cuisine) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(callback, neighborhood) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        console.log(typeof callback);\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   * Change needed for Rest Server as extension is no longer supplied\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    //change due to database not having photograph value for every entry\r\n    return (`/img/${restaurant.id}.jpg`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n   static mapMarkerForRestaurant(restaurant, map) {\r\n    // https://leafletjs.com/reference-1.3.0.html#marker  \r\n    const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng],\r\n      {title: restaurant.name,\r\n      alt: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant)\r\n      })\r\n      marker.addTo(newMap);\r\n    return marker;\r\n  } \r\n  /* static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  } */\r\n\r\n}\r\n\r\n"]}