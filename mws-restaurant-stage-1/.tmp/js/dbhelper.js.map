{"version":3,"sources":["dbhelper.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","DBHelper","this","value","callback","id","fetchURL","DATABASE_URL","fetch","then","response","json","data","console","log","err","error","concat","fetchRestaurants","restaurants","restaurant","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","marker","L","latlng","lat","lng","title","name","alt","url","urlForRestaurant","addTo","newMap","get","port"],"mappings":"AAAA,YAAa,SAASA,iBAAgBC,EAAUC,GAAc,KAAMD,YAAoBC,IAAe,KAAM,IAAIC,WAAU,qCAAuC,QAASC,mBAAkBC,EAAQC,GAAQ,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAC,GAAIE,GAAaH,EAAMC,EAAGE,GAAWC,WAAaD,EAAWC,aAAc,EAAMD,EAAWE,cAAe,EAAS,SAAWF,KAAYA,EAAWG,UAAW,GAAKC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAc,QAASO,cAAad,EAAae,EAAYC,GAAgJ,MAA9HD,IAAYb,kBAAkBF,EAAYiB,UAAWF,GAAgBC,GAAad,kBAAkBF,EAAagB,GAAoBhB,EAEiB,GACxqBkB,UAAkB,WAAa,QAASA,KAAYpB,gBAAgBqB,KAAMD,GAiMZ,MAjMuBJ,cAAaI,EAAU,OAASL,IAAK,mBAauBO,MAAO,SACpIC,EAAUC,GAchC,GAAIC,EAIFA,GAHGD,EAGQJ,EAASM,aAAe,IAAMF,EAF9BJ,EAASM,aAItBC,MAAMF,GAAUG,KAAK,SAAAC,GAAQ,MAAIA,GAASC,SACzCF,KAAK,SAAAG,GAEJ,MADAC,SAAQC,IAAI,qBAAsBF,GAC3BR,EAAS,KAAMQ,KAHxBJ,SAIO,SAAAO,GAAQ,GAAMC,GAAK,4BAAAC,OAAgCF,EAC1D,OAAOX,GAASY,EAAO,WAOZpB,IAAK,sBAAuBO,MAAO,SACrBE,EAAID,GAE7BH,EAASiB,iBAAiB,SAACF,EAAOG,GAChC,GAAIH,EACFZ,EAASY,EAAO,UACX,CACL,GAAMI,GAAaD,EAAYE,KAAK,SAAAC,GAAC,MAAIA,GAAEjB,IAAMA,GAC7Ce,GACFhB,EAAS,KAAMgB,GAEfhB,EAAS,4BAA6B,YAQjCR,IAAK,2BAA4BO,MAAO,SACrBoB,EAASnB,GAEvCH,EAASiB,iBAAiB,SAACF,EAAOG,GAChC,GAAIH,EACFZ,EAASY,EAAO,UACX,CAEL,GAAMQ,GAAUL,EAAYM,OAAO,SAAAH,GAAC,MAAIA,GAAEI,cAAgBH,GAC1DnB,GAAS,KAAMoB,SAOR5B,IAAK,gCAAiCO,MAAO,SACrBwB,EAAcvB,GAEjDH,EAASiB,iBAAiB,SAACF,EAAOG,GAChC,GAAIH,EACFZ,EAASY,EAAO,UACX,CAEL,GAAMQ,GAAUL,EAAYM,OAAO,SAAAH,GAAC,MAAIA,GAAEK,cAAgBA,GAC1DvB,GAAS,KAAMoB,SAOR5B,IAAK,0CAA2CO,MAAO,SACrBoB,EAASI,EAAcvB,GAEpEH,EAASiB,iBAAiB,SAACF,EAAOG,GAChC,GAAIH,EACFZ,EAASY,EAAO,UACX,CACL,GAAIQ,GAAUL,CACC,QAAXI,IACFC,EAAUA,EAAQC,OAAO,SAAAH,GAAC,MAAIA,GAAEI,cAAgBH,KAE9B,OAAhBI,IACFH,EAAUA,EAAQC,OAAO,SAAAH,GAAC,MAAIA,GAAEK,cAAgBA,KAElDvB,EAAS,KAAMoB,SAOR5B,IAAK,qBAAsBO,MAAO,SACrBC,GAExBH,EAASiB,iBAAiB,SAACF,EAAOG,GAChC,GAAIH,EACFZ,EAASY,EAAO,UACX,CAEL,GAAMY,GAAgBT,EAAYU,IAAI,SAACC,EAAG1C,GAAJ,MAAU+B,GAAY/B,GAAGuC,eAEzDI,EAAsBH,EAAcH,OAAO,SAACK,EAAG1C,GAAJ,MAAUwC,GAAcI,QAAQF,IAAM1C,GACvFgB,GAAS,KAAM2B,SAORnC,IAAK,gBAAiBO,MAAO,SACrBC,GAEnBH,EAASiB,iBAAiB,SAACF,EAAOG,GAChC,GAAIH,EACFZ,EAASY,EAAO,UACX,CAEL,GAAMiB,GAAWd,EAAYU,IAAI,SAACC,EAAG1C,GAAJ,MAAU+B,GAAY/B,GAAGsC,eAEpDQ,EAAiBD,EAASR,OAAO,SAACK,EAAG1C,GAAJ,MAAU6C,GAASD,QAAQF,IAAM1C,GACxEgB,GAAS,KAAM8B,SAORtC,IAAK,mBAAoBO,MAAO,SACrBiB,GACtB,MAAA,wBAAAH,OAAgCG,EAAWf,OAMhCT,IAAK,wBAAyBO,MAAO,SACrBiB,GAC3B,MAAA,QAAAH,OAAgBG,EAAWf,GAA3B,WAKWT,IAAK,yBAA0BO,MAAO,SACpBiB,EAAYS,GAEzC,GAAMM,GAAS,GAAIC,GAAED,QAAQf,EAAWiB,OAAOC,IAAKlB,EAAWiB,OAAOE,MACnEC,MAAOpB,EAAWqB,KACnBC,IAAKtB,EAAWqB,KAChBE,IAAK1C,EAAS2C,iBAAiBxB,IAGjC,OADEe,GAAOU,MAAMC,QACRX,KAWKvC,IAAK,eAGmBmD,IAAK,WAzLzC,GAAMC,GAAO,IACb,OAAA,oBAAA/B,OAA2B+B,EAA3B,oBAyLuE/C","file":"dbhelper.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337 // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback, id) {\r\n    /* let xhr = new XMLHttpRequest();\r\n    xhr.open('GET', DBHelper.DATABASE_URL);\r\n    xhr.onload = () => {\r\n      if (xhr.status === 200) { // Got a success response from server!\r\n        const json = JSON.parse(xhr.responseText);\r\n        const restaurants = json.restaurants;\r\n        callback(null, restaurants);\r\n      } else { // Oops!. Got an error from server.\r\n        const error = (`Request failed. Returned status of ${xhr.status}`);\r\n        callback(error, null);\r\n      }\r\n    };\r\n    xhr.send(); */\r\n    let fetchURL;\r\n    if (!id) {\r\n      fetchURL = DBHelper.DATABASE_URL;\r\n    } else {\r\n      fetchURL = DBHelper.DATABASE_URL + '/' + id;\r\n    }\r\n    fetch(fetchURL).then(response => response.json())\r\n    .then(data => {\r\n      console.log(\"restaurants JSON: \", data) // added from Project supplied webinar to troubleshoot 10th image not displaying\r\n      return callback(null, data)})\r\n    .catch(err => {const error = (`Request failed. Returned ${err}`);\r\n    return callback(error, null);\r\n  })\r\n\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   * Change needed for Rest Server as extension is no longer supplied\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return (`/img/${restaurant.id}.jpg`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n   static mapMarkerForRestaurant(restaurant, map) {\r\n    // https://leafletjs.com/reference-1.3.0.html#marker  \r\n    const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng],\r\n      {title: restaurant.name,\r\n      alt: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant)\r\n      })\r\n      marker.addTo(newMap);\r\n    return marker;\r\n  } \r\n  /* static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  } */\r\n\r\n}\r\n\r\n"]}