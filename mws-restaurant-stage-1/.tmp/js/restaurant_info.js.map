{"version":3,"sources":["restaurant_info.js"],"names":["restaurant","newMap","document","addEventListener","event","initMap","fetchRestaurantFromURL","error","console","self","L","map","center","latlng","lat","lng","zoom","scrollWheelZoom","tileLayer","mapboxToken","maxZoom","attribution","id","addTo","fillBreadcrumb","DBHelper","mapMarkerForRestaurant","callback","getParameterByName","fetchRestaurantById","fillRestaurantHTML","name","getElementById","innerHTML","address","image","img","imageUrlForRestaurant","imgArr","split","img1","img2","img3","className","src","srcset","sizes","alt","cuisine","cuisine_type","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","createElement","day","appendChild","time","reviews","container","title","noReviews","ul","forEach","review","createReviewHTML","li","date","rating","comments","breadcrumb","url","window","location","href","replace","regex","RegExp","results","exec","decodeURIComponent"],"mappings":"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","sourcesContent":["let restaurant;\nvar newMap;\n\n/**\n * Initialize map as soon as the page is loaded.\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {  \n  initMap();\n});\n\n/**\n * Initialize leaflet map\n */\nconst initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {      \n      self.newMap = L.map('map', {\n        center: [restaurant.latlng.lat, restaurant.latlng.lng],\n        zoom: 16,\n        scrollWheelZoom: false\n      });\n      L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\n        mapboxToken: 'pk.eyJ1IjoidGhlZ3JlYXRkZWJhdGUiLCJhIjoiY2pqeHhjY2V4YWh4ZDNxbGZtMXAxdndmdSJ9.buoZhVfjmQ4MLiAk0B4vaA',\n        maxZoom: 18,\n        attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\n          '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\n          'Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n        id: 'mapbox.streets'    \n      }).addTo(newMap);\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.newMap);\n    }\n  });\n}  \n \n/* window.initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n} */\n\n/**\n * Get current restaurant from page URL.\n */\nconst fetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const image = document.getElementById('restaurant-img');\n  var img = DBHelper.imageUrlForRestaurant(restaurant);\n  var imgArr = img.split('.')\n  var img1 = imgArr[0] + '-400_1x.' + imgArr[1];\n  var img2 = imgArr[0] + '-800_2x.' + imgArr[1];\n  var img3 = imgArr[0] + '-1600.' + imgArr[1];\n  image.className = 'restaurant-img';\n  image.src = img1;\n  image.srcset = `${img3} 1600w, ${img2} 800w, ${img1} 400w`;\n  image.sizes = '(max-width: 400px) 400px, (max-width: 800px) 800px, (max-width: 1200px) 1600px';\n  image.alt = restaurant.name;\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  fillReviewsHTML();\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h2');\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\nconst createReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = review.date;\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nconst fillBreadcrumb = (restaurant=self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n"],"file":"restaurant_info.js"}