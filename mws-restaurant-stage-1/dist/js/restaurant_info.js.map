{"version":3,"sources":["restaurant_info.js"],"names":["modalToggle","modal","document","getElementById","classList","toggle","restaurant","newMap","addEventListener","event","initMap","fetchRestaurantFromURL","error","console","self","L","map","center","latlng","lat","lng","zoom","scrollWheelZoom","tileLayer","mapboxToken","maxZoom","attribution","id","addTo","fillBreadcrumb","DBHelper","mapMarkerForRestaurant","callback","getParameterByName","fetchRestaurantById","fillRestaurantHTML","arguments","length","undefined","name","innerHTML","address","image","img","imageUrlForRestaurant","imgArr","split","img1","img2","img3","className","src","srcset","concat","sizes","alt","cuisine","cuisine_type","operating_hours","fillRestaurantHoursHTML","fetchReviewByRestaurantId","reviews","fillReviewsHTML","fillReviewModal","rating","rates","forEach","rate","option","createElement","value","innerText","toString","append","close","getElementsByClassName","window","target","submit","comment","saveReview","result","log","location","href","operatingHours","hours","key","row","day","appendChild","time","container","title","addReviewLink","onclick","noReviews","ul","review","createReviewHTML","li","date","Date","createdAt","toDateString","comments","breadcrumb","url","replace","regex","RegExp","results","exec","decodeURIComponent"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["let restaurant;\nvar newMap;\n\n/**\n * Initialize map as soon as the page is loaded.\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {  \n  initMap();\n});\n\n/**\n * Initialize leaflet map\n */\nconst initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {      \n      self.newMap = L.map('map', {\n        center: [restaurant.latlng.lat, restaurant.latlng.lng],\n        zoom: 16,\n        scrollWheelZoom: false\n      });\n      L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\n        mapboxToken: 'pk.eyJ1IjoidGhlZ3JlYXRkZWJhdGUiLCJhIjoiY2pqeHhjY2V4YWh4ZDNxbGZtMXAxdndmdSJ9.buoZhVfjmQ4MLiAk0B4vaA',\n        maxZoom: 18,\n        attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\n          '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\n          'Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n        id: 'mapbox.streets'    \n      }).addTo(newMap);\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.newMap);\n    }\n  });\n}  \n \n/* window.initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n} */\n\n/**\n * Get current restaurant from page URL.\n */\nconst fetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    error = 'No restaurant id in URL';\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const image = document.getElementById('restaurant-img');\n  var img = DBHelper.imageUrlForRestaurant(restaurant);\n  var imgArr = img.split('.')\n  var img1 = imgArr[0] + '-400_1x.' + imgArr[1];\n  var img2 = imgArr[0] + '-800_2x.' + imgArr[1];\n  var img3 = imgArr[0] + '-1600.' + imgArr[1];\n  image.className = 'restaurant-img';\n  image.src = img1;\n  image.srcset = `${img3} 1600w, ${img2} 800w, ${img1} 400w`;\n  image.sizes = '(max-width: 400px) 400px, (max-width: 800px) 800px, (max-width: 1200px) 1600px';\n  image.alt = restaurant.name;\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  DBHelper.fetchReviewByRestaurantId(restaurant.id, (error, reviews) => {\n    fillReviewsHTML(error, reviews);\n  })\n  \n  // create review modal\n  fillReviewModal();\n  \n}\n/**\n * Function to toggle display of modal window\n */\nfunction modalToggle(){\n  const modal = document.getElementById('modal');\n    modal.classList.toggle('show-modal');\n}\n/**\n * Create Modal to submit new review\n */\nconst fillReviewModal = () => {\n\n  const rating = document.getElementById('rvw-rate');\n  //loop through and create ratings\n  const rates = [1,2,3,4,5];\n  rates.forEach(rate =>{\n    const option = document.createElement('option');\n    option.value = rate;\n    option.innerText = rate.toString();\n    rating.append(option);\n  });\n\n  const close = document.getElementsByClassName('close-btn')[0];\n  close.addEventListener(\"click\", modalToggle);\n\n  window.addEventListener(\"click\", function(event){\n    if(event.target.id == \"modal\"){\n      modalToggle();\n    }\n  })\n\n  const submit = document.getElementsByClassName('submit-btn')[0];\n  submit.addEventListener('click',function(){\n    const name = document.getElementsByClassName('rvw-reviewer')[0].value;\n    const rating = document.getElementsByClassName('rvw-rate')[0].value;\n    const comment = document.getElementsByClassName('rvw-comment')[0].value;\n\n    DBHelper.saveReview(self.restaurant.id, name, rating, comment, (error, result) => {\n      if(error){\n        console.log(`Error saving review: ${error}`); \n      }\n      window.location.href=`/restaurant.html?id=${self.restaurant.id}`;\n    });\n  });\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillReviewsHTML = (error, reviews) => {\n  if(error) {\n    console.log(`Error displaying reviews: ${error}`);\n  }\n  self.restaurant.reviews = reviews;\n\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h2');\n  title.innerHTML = 'Reviews';\n  \n  const addReviewLink = document.createElement(\"a\");\n  addReviewLink.innerHTML = 'Add Review';\n  addReviewLink.onclick =  modalToggle;\n  title.appendChild(addReviewLink);\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\nconst createReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  //need change for date from review server\n  date.innerHTML = new Date(review.createdAt).toDateString();\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  if(!review.comments){\n    comments.innerHTML = review.comment;\n  }else{\n    comments.innerHTML = review.comments;\n  }\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nconst fillBreadcrumb = (restaurant=self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}"]}