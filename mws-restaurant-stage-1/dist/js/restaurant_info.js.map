{"version":3,"sources":["restaurant_info.js"],"names":["restaurant","newMap","document","addEventListener","event","initMap","fetchRestaurantFromURL","error","console","self","L","map","center","latlng","lat","lng","zoom","scrollWheelZoom","tileLayer","mapboxToken","maxZoom","attribution","id","addTo","fillBreadcrumb","DBHelper","mapMarkerForRestaurant","callback","getParameterByName","fetchRestaurantById","fillRestaurantHTML","arguments","length","undefined","name","getElementById","innerHTML","address","image","img","imageUrlForRestaurant","imgArr","split","img1","img2","img3","className","src","srcset","concat","sizes","alt","cuisine","cuisine_type","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","createElement","day","appendChild","time","reviews","container","title","noReviews","ul","forEach","review","createReviewHTML","li","date","rating","comments","breadcrumb","url","window","location","href","replace","regex","RegExp","results","exec","decodeURIComponent"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["let restaurant;\nvar newMap;\n\n/**\n * Initialize map as soon as the page is loaded.\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {  \n  initMap();\n});\n\n/**\n * Initialize leaflet map\n */\ninitMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {      \n      self.newMap = L.map('map', {\n        center: [restaurant.latlng.lat, restaurant.latlng.lng],\n        zoom: 16,\n        scrollWheelZoom: false\n      });\n      L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\n        mapboxToken: 'pk.eyJ1IjoidGhlZ3JlYXRkZWJhdGUiLCJhIjoiY2pqeHhjY2V4YWh4ZDNxbGZtMXAxdndmdSJ9.buoZhVfjmQ4MLiAk0B4vaA',\n        maxZoom: 18,\n        attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\n          '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\n          'Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n        id: 'mapbox.streets'    \n      }).addTo(newMap);\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.newMap);\n    }\n  });\n}  \n \n/* window.initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n} */\n\n/**\n * Get current restaurant from page URL.\n */\nfetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nfillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const image = document.getElementById('restaurant-img');\n  var img = DBHelper.imageUrlForRestaurant(restaurant);\n  var imgArr = img.split('.')\n  var img1 = imgArr[0] + '-400_1x.' + imgArr[1];\n  var img2 = imgArr[0] + '-800_2x.' + imgArr[1];\n  var img3 = imgArr[0] + '-1600.' + imgArr[1];\n  image.className = 'restaurant-img';\n  image.src = img1;\n  image.srcset = `${img3} 1600w, ${img2} 800w, ${img1} 400w`;\n  image.sizes = '(max-width: 400px) 400px, (max-width: 800px) 800px, (max-width: 1200px) 1600px';\n  image.alt = restaurant.name;\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  fillReviewsHTML();\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h2');\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\ncreateReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = review.date;\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nfillBreadcrumb = (restaurant=self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\ngetParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n"]}