{"version":3,"sources":["main.js"],"names":["restaurants","neighborhoods","cuisines","newMap","markers","document","addEventListener","event","initMap","fetchNeighborhoods","fetchCuisines","DBHelper","error","console","self","fillNeighborhoodsHTML","arguments","length","undefined","select","getElementById","forEach","neighborhood","option","createElement","innerHTML","value","append","fillCuisinesHTML","cuisine","L","map","center","zoom","scrollWheelZoom","tileLayer","mapboxToken","maxZoom","attribution","id","addTo","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","ul","marker","remove","restaurant","createRestaurantHTML","addMarkersToMap","li","image","className","img","imageUrlForRestaurant","imgArr","split","img2x","img1x","src","srcset","concat","alt","name","address","more","onclick","window","location","href","urlForRestaurant","onClick","options","url","mapMarkerForRestaurant","on","push"],"mappings":"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","file":"main.js","sourcesContent":["let restaurants,\n  neighborhoods,\n  cuisines\nvar newMap\nvar markers = []\n\n/**\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {\n  initMap(); // added \n  fetchNeighborhoods();\n  fetchCuisines();\n});\n\n/**\n * Fetch all neighborhoods and set their HTML.\n */\nconst fetchNeighborhoods = () => {\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\n    if (error) { // Got an error\n      console.error(error);\n    } else {\n      self.neighborhoods = neighborhoods;\n      fillNeighborhoodsHTML();\n    }\n  });\n}\n\n/**\n * Set neighborhoods HTML.\n */\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\n  const select = document.getElementById('neighborhoods-select');\n  neighborhoods.forEach(neighborhood => {\n    const option = document.createElement('option');\n    option.innerHTML = neighborhood;\n    option.value = neighborhood;\n    select.append(option);\n  });\n}\n\n/**\n * Fetch all cuisines and set their HTML.\n */\nconst fetchCuisines = () => {\n  DBHelper.fetchCuisines((error, cuisines) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.cuisines = cuisines;\n      fillCuisinesHTML();\n    }\n  });\n}\n\n/**\n * Set cuisines HTML.\n */\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\n  const select = document.getElementById('cuisines-select');\n\n  cuisines.forEach(cuisine => {\n    const option = document.createElement('option');\n    option.innerHTML = cuisine;\n    option.value = cuisine;\n    select.append(option);\n  });\n}\n\n/**\n * Initialize leaflet map, called from HTML.\n */\nconst initMap = () => {\n  self.newMap = L.map('map', {\n        center: [40.722216, -73.987501],\n        zoom: 12,\n        scrollWheelZoom: false\n      });\n  L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\n    mapboxToken: 'pk.eyJ1IjoidGhlZ3JlYXRkZWJhdGUiLCJhIjoiY2pqeHhjY2V4YWh4ZDNxbGZtMXAxdndmdSJ9.buoZhVfjmQ4MLiAk0B4vaA',\n    maxZoom: 18,\n    attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\n      '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\n      'Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n    id: 'mapbox.streets'\n  }).addTo(newMap);\n\n  updateRestaurants();\n}\n/* window.initMap = () => {\n  let loc = {\n    lat: 40.722216,\n    lng: -73.987501\n  };\n  self.map = new google.maps.Map(document.getElementById('map'), {\n    zoom: 12,\n    center: loc,\n    scrollwheel: false\n  });\n  updateRestaurants();\n} */\n\n/**\n * Update page and map for current restaurants.\n */\nconst updateRestaurants = () => {\n  const cSelect = document.getElementById('cuisines-select');\n  const nSelect = document.getElementById('neighborhoods-select');\n\n  const cIndex = cSelect.selectedIndex;\n  const nIndex = nSelect.selectedIndex;\n\n  const cuisine = cSelect[cIndex].value;\n  const neighborhood = nSelect[nIndex].value;\n\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      resetRestaurants(restaurants);\n      fillRestaurantsHTML();\n    }\n  })\n}\n\n/**\n * Clear current restaurants, their HTML and remove their map markers.\n */\nconst resetRestaurants = (restaurants) => {\n  // Remove all restaurants\n  self.restaurants = [];\n  const ul = document.getElementById('restaurants-list');\n  ul.innerHTML = '';\n\n  // Remove all map markers\n  if (self.markers) {\n    self.markers.forEach(marker => marker.remove());\n  }\n  self.markers = [];\n  self.restaurants = restaurants;\n}\n\n/**\n * Create all restaurants HTML and add them to the webpage.\n */\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\n  const ul = document.getElementById('restaurants-list');\n  restaurants.forEach(restaurant => {\n    ul.append(createRestaurantHTML(restaurant));\n  });\n  addMarkersToMap();\n}\n\n/**\n * Create restaurant HTML.\n */\nconst createRestaurantHTML = (restaurant) => {\n  const li = document.createElement('li');\n\n  //changes for img section inspired by Project 1 MWS\n  const image = document.createElement('img');\n  image.className = 'restaurant-img';\n  const img = DBHelper.imageUrlForRestaurant(restaurant);\n  var imgArr = img.split('.')\n  var img2x = imgArr[0] + '-800_2x.' + imgArr[1];\n  var img1x = imgArr[0] + '-400_1x.' + imgArr[1];\n  image.src = img1x;\n  image.srcset = `${img2x} 2x, ${img1x} 1x`\n  image.alt = restaurant.name;\n  li.append(image);\n\n  const name = document.createElement('h3');\n  name.innerHTML = restaurant.name;\n  li.append(name);\n\n  const neighborhood = document.createElement('p');\n  neighborhood.innerHTML = restaurant.neighborhood;\n  li.append(neighborhood);\n\n  const address = document.createElement('p');\n  address.innerHTML = restaurant.address;\n  li.append(address);\n\n  const more = document.createElement('button');\n  more.innerHTML = 'Restaurant Details';\n  more.onclick = function() {\n    window.location.href = DBHelper.urlForRestaurant(restaurant);\n  };\n  //more.href = DBHelper.urlForRestaurant(restaurant);\n  li.append(more)\n\n  return li\n}\n\n/**\n * Add markers for current restaurants to the map.\n */\nconst addMarkersToMap = (restaurants = self.restaurants) => {\n  restaurants.forEach(restaurant => {\n    // Add marker to the map\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.newMap);\n    marker.on(\"click\", onClick);\n    function onClick() {\n      window.location.href = marker.options.url;\n    }\n    self.markers.push(marker);\n  });\n}\n\n/* addMarkersToMap = (restaurants = self.restaurants) => {\n  restaurants.forEach(restaurant => {\n    // Add marker to the map\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\n    google.maps.event.addListener(marker, 'click', () => {\n      window.location.href = marker.url\n    });\n    self.markers.push(marker);\n  });\n} */\n\n"]}