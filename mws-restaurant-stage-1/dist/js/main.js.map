{"version":3,"sources":["main.js"],"names":["restaurants","neighborhoods","cuisines","newMap","markers","document","addEventListener","event","initMap","fetchNeighborhoods","fetchCuisines","DBHelper","error","console","self","fillNeighborhoodsHTML","select","getElementById","forEach","neighborhood","option","createElement","innerHTML","value","append","fillCuisinesHTML","cuisine","L","map","center","zoom","scrollWheelZoom","tileLayer","mapboxToken","maxZoom","attribution","id","addTo","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","ul","marker","remove","restaurant","createRestaurantHTML","addMarkersToMap","li","image","className","img","imageUrlForRestaurant","imgArr","split","img2x","img1x","src","srcset","alt","name","address","more","onclick","window","location","href","urlForRestaurant","mapMarkerForRestaurant","on","onClick","options","url","push"],"mappings":"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","sourcesContent":["let restaurants,\n  neighborhoods,\n  cuisines\nvar newMap\nvar markers = []\n\n/**\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {\n  initMap(); // added \n  fetchNeighborhoods();\n  fetchCuisines();\n});\n\n/**\n * Fetch all neighborhoods and set their HTML.\n */\nconst fetchNeighborhoods = () => {\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\n    if (error) { // Got an error\n      console.error(error);\n    } else {\n      self.neighborhoods = neighborhoods;\n      fillNeighborhoodsHTML();\n    }\n  });\n}\n\n/**\n * Set neighborhoods HTML.\n */\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\n  const select = document.getElementById('neighborhoods-select');\n  neighborhoods.forEach(neighborhood => {\n    const option = document.createElement('option');\n    option.innerHTML = neighborhood;\n    option.value = neighborhood;\n    select.append(option);\n  });\n}\n\n/**\n * Fetch all cuisines and set their HTML.\n */\nconst fetchCuisines = () => {\n  DBHelper.fetchCuisines((error, cuisines) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.cuisines = cuisines;\n      fillCuisinesHTML();\n    }\n  });\n}\n\n/**\n * Set cuisines HTML.\n */\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\n  const select = document.getElementById('cuisines-select');\n\n  cuisines.forEach(cuisine => {\n    const option = document.createElement('option');\n    option.innerHTML = cuisine;\n    option.value = cuisine;\n    select.append(option);\n  });\n}\n\n/**\n * Initialize leaflet map, called from HTML.\n */\nconst initMap = () => {\n  self.newMap = L.map('map', {\n        center: [40.722216, -73.987501],\n        zoom: 12,\n        scrollWheelZoom: false\n      });\n  L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\n    mapboxToken: 'pk.eyJ1IjoidGhlZ3JlYXRkZWJhdGUiLCJhIjoiY2pqeHhjY2V4YWh4ZDNxbGZtMXAxdndmdSJ9.buoZhVfjmQ4MLiAk0B4vaA',\n    maxZoom: 18,\n    attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\n      '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\n      'Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n    id: 'mapbox.streets'\n  }).addTo(newMap);\n\n  updateRestaurants();\n}\n/* window.initMap = () => {\n  let loc = {\n    lat: 40.722216,\n    lng: -73.987501\n  };\n  self.map = new google.maps.Map(document.getElementById('map'), {\n    zoom: 12,\n    center: loc,\n    scrollwheel: false\n  });\n  updateRestaurants();\n} */\n\n/**\n * Update page and map for current restaurants.\n */\nconst updateRestaurants = () => {\n  const cSelect = document.getElementById('cuisines-select');\n  const nSelect = document.getElementById('neighborhoods-select');\n\n  const cIndex = cSelect.selectedIndex;\n  const nIndex = nSelect.selectedIndex;\n\n  const cuisine = cSelect[cIndex].value;\n  const neighborhood = nSelect[nIndex].value;\n\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      resetRestaurants(restaurants);\n      fillRestaurantsHTML();\n    }\n  })\n}\n\n/**\n * Clear current restaurants, their HTML and remove their map markers.\n */\nconst resetRestaurants = (restaurants) => {\n  // Remove all restaurants\n  self.restaurants = [];\n  const ul = document.getElementById('restaurants-list');\n  ul.innerHTML = '';\n\n  // Remove all map markers\n  if (self.markers) {\n    self.markers.forEach(marker => marker.remove());\n  }\n  self.markers = [];\n  self.restaurants = restaurants;\n}\n\n/**\n * Create all restaurants HTML and add them to the webpage.\n */\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\n  const ul = document.getElementById('restaurants-list');\n  restaurants.forEach(restaurant => {\n    ul.append(createRestaurantHTML(restaurant));\n  });\n  addMarkersToMap();\n}\n\n/**\n * Create restaurant HTML.\n */\nconst createRestaurantHTML = (restaurant) => {\n  const li = document.createElement('li');\n\n  //changes for img section inspired by Project 1 MWS\n  const image = document.createElement('img');\n  image.className = 'restaurant-img';\n  const img = DBHelper.imageUrlForRestaurant(restaurant);\n  var imgArr = img.split('.')\n  var img2x = imgArr[0] + '-800_2x.' + imgArr[1];\n  var img1x = imgArr[0] + '-400_1x.' + imgArr[1];\n  image.src = img1x;\n  image.srcset = `${img2x} 2x, ${img1x} 1x`\n  image.alt = restaurant.name;\n  li.append(image);\n\n  const name = document.createElement('h3');\n  name.innerHTML = restaurant.name;\n  li.append(name);\n\n  const neighborhood = document.createElement('p');\n  neighborhood.innerHTML = restaurant.neighborhood;\n  li.append(neighborhood);\n\n  const address = document.createElement('p');\n  address.innerHTML = restaurant.address;\n  li.append(address);\n\n  const more = document.createElement('button');\n  more.innerHTML = 'Restaurant Details';\n  more.onclick = function() {\n    window.location.href = DBHelper.urlForRestaurant(restaurant);\n  };\n  //more.href = DBHelper.urlForRestaurant(restaurant);\n  li.append(more)\n\n  return li\n}\n\n/**\n * Add markers for current restaurants to the map.\n */\nconst addMarkersToMap = (restaurants = self.restaurants) => {\n  restaurants.forEach(restaurant => {\n    // Add marker to the map\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.newMap);\n    marker.on(\"click\", onClick);\n    function onClick() {\n      window.location.href = marker.options.url;\n    }\n    self.markers.push(marker);\n  });\n}\n\n/* addMarkersToMap = (restaurants = self.restaurants) => {\n  restaurants.forEach(restaurant => {\n    // Add marker to the map\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\n    google.maps.event.addListener(marker, 'click', () => {\n      window.location.href = marker.url\n    });\n    self.markers.push(marker);\n  });\n} */\n\n"],"file":"main.js"}