{"version":3,"sources":["dbhelper.js"],"names":["DBHelper","callback","id","fetchURL","DATABASE_URL","fetch","then","response","json","restaurants","console","log","catch","err","error","fetchRestaurants","restaurant","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","marker","L","latlng","lat","lng","title","name","alt","url","urlForRestaurant","addTo","newMap","port"],"mappings":"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","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337 // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback, id) {\r\n    /* let xhr = new XMLHttpRequest();\r\n    xhr.open('GET', DBHelper.DATABASE_URL);\r\n    xhr.onload = () => {\r\n      if (xhr.status === 200) { // Got a success response from server!\r\n        const json = JSON.parse(xhr.responseText);\r\n        const restaurants = json.restaurants;\r\n        callback(null, restaurants);\r\n      } else { // Oops!. Got an error from server.\r\n        const error = (`Request failed. Returned status of ${xhr.status}`);\r\n        callback(error, null);\r\n      }\r\n    };\r\n    xhr.send(); \r\n    */\r\n    let fetchURL = DBHelper.DATABASE_URL;\r\n\r\n    if (!id) {\r\n      fetchURL = DBHelper.DATABASE_URL;\r\n    } else {\r\n      fetchURL = DBHelper.DATABASE_URL + '/' + id;\r\n    }\r\n\r\n    fetch(fetchURL).then(response => {\r\n      response.json().then(restaurants => {\r\n      console.log(\"restaurants JSON: \", restaurants); // added from Project supplied webinar to troubleshoot 10th image not displaying\r\n      callback(null, restaurants);\r\n      });\r\n    })\r\n    .catch(err => {const error = (`Request failed. Returned ${err}`);\r\n    callback(error, null);\r\n  })\r\n}\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        console.log(`callback type: ${typeof callback}`);\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(callback, cuisine) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(callback, neighborhood) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        //console.log(typeof callback);\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   * Change needed for Rest Server as extension is no longer supplied\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    //change due to database not having photograph value for every entry\r\n    return (`/img/${restaurant.id}.jpg`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n   static mapMarkerForRestaurant(restaurant, map) {\r\n    // https://leafletjs.com/reference-1.3.0.html#marker  \r\n    const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng],\r\n      {title: restaurant.name,\r\n      alt: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant)\r\n      })\r\n      marker.addTo(newMap);\r\n    return marker;\r\n  } \r\n  /* static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  } */\r\n\r\n}\r\n\r\n"],"file":"dbhelper.js"}