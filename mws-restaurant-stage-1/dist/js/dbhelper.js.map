{"version":3,"sources":["dbhelper.js"],"names":["DBHelper","callback","id","fetchURL","DATABASE_URL","fetch","then","response","clone","json","restaurants","console","log","catch","err","error","fetchRestaurants","restaurant","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","marker","L","latlng","lat","lng","title","name","alt","url","urlForRestaurant","addTo","newMap","port"],"mappings":"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","sourcesContent":["/**\n * Common database helper functions.\n */\nclass DBHelper {\n\n  /**\n   * Database URL.\n   * Change this to restaurants.json file location on your server.\n   */\n  static get DATABASE_URL() {\n    const port = 1337 // Change this to your server port\n    return `http://localhost:${port}/restaurants`;\n  }\n\n  /**\n   * Fetch all restaurants.\n   */\n  static fetchRestaurants(callback, id) {\n    /* let xhr = new XMLHttpRequest();\n    xhr.open('GET', DBHelper.DATABASE_URL);\n    xhr.onload = () => {\n      if (xhr.status === 200) { // Got a success response from server!\n        const json = JSON.parse(xhr.responseText);\n        const restaurants = json.restaurants;\n        callback(null, restaurants);\n      } else { // Oops!. Got an error from server.\n        const error = (`Request failed. Returned status of ${xhr.status}`);\n        callback(error, null);\n      }\n    };\n    xhr.send(); \n    */\n    let fetchURL = DBHelper.DATABASE_URL;\n\n    if (!id) {\n      fetchURL = DBHelper.DATABASE_URL;\n    } else {\n      fetchURL = DBHelper.DATABASE_URL + '/' + id;\n    }\n\n      fetch(fetchURL).then(response => {\n      response.clone().json().then(restaurants => {\n      console.log(\"restaurants JSON: \", restaurants); // added from Project supplied webinar to troubleshoot 10th image not displaying\n      callback(null, restaurants);\n      });\n    }).catch(err => {\n    const error = (`Request failed. Returned ${err}`);\n    callback(error, null);\n  });\n}\n\n  /**\n   * Fetch a restaurant by its ID.\n   */\n  static fetchRestaurantById(id, callback) {\n    // fetch all restaurants with proper error handling.\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        console.log(`callback type: ${typeof callback}`);\n        callback(error, null);\n      } else {\n        const restaurant = restaurants.find(r => r.id == id);\n        if (restaurant) { // Got the restaurant\n          callback(null, restaurant);\n        } else { // Restaurant does not exist in the database\n          callback('Restaurant does not exist', null);\n        }\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a cuisine type with proper error handling.\n   */\n  static fetchRestaurantByCuisine(callback, cuisine) {\n    // Fetch all restaurants  with proper error handling\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Filter restaurants to have only given cuisine type\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a neighborhood with proper error handling.\n   */\n  static fetchRestaurantByNeighborhood(callback, neighborhood) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Filter restaurants to have only given neighborhood\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\n   */\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        //console.log(typeof callback);\n        callback(error, null);\n      } else {\n        let results = restaurants\n        if (cuisine != 'all') { // filter by cuisine\n          results = results.filter(r => r.cuisine_type == cuisine);\n        }\n        if (neighborhood != 'all') { // filter by neighborhood\n          results = results.filter(r => r.neighborhood == neighborhood);\n        }\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch all neighborhoods with proper error handling.\n   */\n  static fetchNeighborhoods(callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Get all neighborhoods from all restaurants\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\n        // Remove duplicates from neighborhoods\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\n        callback(null, uniqueNeighborhoods);\n      }\n    });\n  }\n\n  /**\n   * Fetch all cuisines with proper error handling.\n   */\n  static fetchCuisines(callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Get all cuisines from all restaurants\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\n        // Remove duplicates from cuisines\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\n        callback(null, uniqueCuisines);\n      }\n    });\n  }\n\n  /**\n   * Restaurant page URL.\n   */\n  static urlForRestaurant(restaurant) {\n    return (`./restaurant.html?id=${restaurant.id}`);\n  }\n\n  /**\n   * Restaurant image URL.\n   * Change needed for Rest Server as extension is no longer supplied\n   */\n  static imageUrlForRestaurant(restaurant) {\n    //change due to database not having photograph value for every entry\n    return (`/img/${restaurant.id}.jpg`);\n  }\n\n  /**\n   * Map marker for a restaurant.\n   */\n   static mapMarkerForRestaurant(restaurant, map) {\n    // https://leafletjs.com/reference-1.3.0.html#marker  \n    const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng],\n      {title: restaurant.name,\n      alt: restaurant.name,\n      url: DBHelper.urlForRestaurant(restaurant)\n      })\n      marker.addTo(newMap);\n    return marker;\n  } \n  /* static mapMarkerForRestaurant(restaurant, map) {\n    const marker = new google.maps.Marker({\n      position: restaurant.latlng,\n      title: restaurant.name,\n      url: DBHelper.urlForRestaurant(restaurant),\n      map: map,\n      animation: google.maps.Animation.DROP}\n    );\n    return marker;\n  } */\n\n}\n\n"],"file":"dbhelper.js"}